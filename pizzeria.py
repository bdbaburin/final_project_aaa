from pizza_bones import Hawaiian, Margherita, Pepperoni, PizzaGeneral
from typing import List
import random
from tqdm import tqdm
from time import sleep
from decorator import pizza_log


PIZZERIA_NAMES = [
    "–ü–∏—Ü—Ü–µ–∑–≤–æ–Ω",
    "–ì–æ—Ä—è—á–∞—è –î—É–æ–º–æ",
    "–†–∏–º—Å–∫–∏–µ —Å–µ–∫—Ä–µ—Ç—ã",
    "–í–µ–∑—É—á–∏–π –¢–µ—Å—Ç–æ",
    "–ú–∞–ª–µ–Ω—å–∫–∞—è –ò—Ç–∞–ª–∏—è",
    "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ –†–∞–π",
    "–í–∫—É—Å –¢–æ—Å–∫–∞–Ω—ã",
    "–î–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è –õ–∞–≤–∫–∞",
    "–°–∏—Ü–∏–ª–∏–π—Å–∫–∏–µ –°–æ–∫—Ä–æ–≤–∏—â–∞",
    "–ü–∏—Ü—Ü–∞-–í–∫—É—Å–Ω—è—à–∫–∞",
]

MAX_BAKING_TIME = {"L": 4, "XL": 8}


class Pizzaria:
    """–°–∞–º–∞—è –æ–±—ã—á–Ω–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞–º –≥–æ—Ç–æ–≤–∏—Ç—å –ø–∏—Ü—Ü—É
    Attributes:
        pizzas (List[PizzaGeneral]):
            –ü–∏—Ü—Ü—ã –≤ –º–µ–Ω—é

        name (str):
            –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏ (–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏–∑ PIZZERIA_NAMES)

        menu (List[Dict]):
            –ú–µ–Ω—é –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–ü–∏—Ü—Ü–∞: —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤}

        to_bake (List):
            –°–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø–µ—á—å

        to_delivery (List):
            –°–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å

        to_takeaway (List):
            –°–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É

        dict_menu (dict):
            –ü–æ–≤–∞—Ä—Å–∫–æ–π —á–µ–∫–ª–∏—Å—Ç –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏ –ø–∏—Ü—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–ù–∞–∑–≤–∞–Ω–∏–µ: –ø–∏—Ü—Ü–∞}

    Methods:
        show_menu(self) -> str
            –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏

        get_order(self, name: str, delivery: bool = False, size: str = "L") -> None
            –ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–∏–º–∞—Ç—å –ø–∏—Ü—Ü–µ—Ä–∏–∏ –∑–∞–∫–∞–∑—ã

        bake(self) -> None:
            –ü–µ—á–µ—Ç –ø–∏—Ü—Ü—É –Ω–∞ –∫—É—Ö–Ω–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏

        get_order_delivered(self) -> None
            –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—ã, –∫–æ—Ç–æ–≤—ã–µ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ

        get_order_takeaway(self) -> None
            –ú–µ—Ç–æ–¥ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É –≥–æ—Ç–æ–≤—ã–µ –ø–∏—Ü—Ü—ã

        get_buisiness(self, order: str, delivery: bool = False, size: str = "L") -> None
            –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –ø–∏—Ü—Ü–µ—Ä–∏–∏:
            -–ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤
            -–≥–æ—Ç–æ–≤–∫–∞ –ø–∏—Ü—Ü
            -–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É
            -–¥–æ—Å—Ç–∞–≤–∫–∞
    """

    def __init__(
        self, pizzas: List["PizzaGeneral"] = [Hawaiian(), Margherita(), Pepperoni()]
    ) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å –ø–∏—Ü—Ü–µ—Ä–∏–∏

        Attributes:
            pizzas (List[PizzaGeneral]):
                –ü–∏—Ü—Ü—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –º–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏

        Raises:
            TypeError:
                –í–æ–∑–Ω–∏–∫–∞–µ—Ç, –µ—Å–ª–∏ –ø–∏—Ü—Ü–µ—Ä–∏—é –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ –ø–∏—Ü—Ü—ã, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        """
        if not all(map(lambda x: isinstance(x, PizzaGeneral), pizzas)):
            raise TypeError("–ù–∞—à–∞ –ø–∏—Ü—Ü–µ—Ä–∏—è –≥–æ—Ç–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ –ø–∏—Ü—Ü—ã!")

        self.pizzas = pizzas
        self.name = random.choice(PIZZERIA_NAMES)
        self.menu = [list(piz.dict().items())[0] for piz in self.pizzas]
        self.to_bake: List[PizzaGeneral] = []
        self.to_delivery: List[PizzaGeneral] = []
        self.to_takeaway: List[PizzaGeneral] = []
        self.dict_menu = {piz._name: piz for piz in self.pizzas}

    def show_menu(self) -> str:
        """–ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –º–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏"""

        menu_str = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∏—Ü—Ü–µ—Ä–∏—é {self.name}\n–ù–∞—à–µ –º–µ–Ω—é:\n"
        for piz in self.menu:
            name, ingred = piz
            ingred = ", ".join(ingred)
            menu_str += f"- {name} : {ingred}\n"

        return menu_str

    def get_order(self, name: str, delivery: bool = False, size: str = "L") -> None:
        """–ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã

        Parameters:
            name (str):
                –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã –∏–∑ –º–µ–Ω—é
            delivery (bool):
                –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞
            size (str) (default = L):
                –†–∞–∑–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –ø–∏—Ü—Ü—ã
                    (–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã L –∏–ª–∏ XL)
        """
        names = [piz._name for piz in self.pizzas]
        if name.lower().capitalize() not in set(names):
            raise NameError("–¢–∞–∫–æ–π –ø–∏—Ü—Ü—ã –Ω–µ—Ç –≤ –º–µ–Ω—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é")

        if size not in MAX_BAKING_TIME.keys():
            raise NameError("–¢–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç –≤ –º–µ–Ω—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π")

        menu_pos = name.lower().capitalize()
        pizza = self.dict_menu[menu_pos]
        pizza.size = size
        self.to_bake.append(pizza)
        if delivery:
            self.to_delivery.append(pizza)
        else:
            self.to_takeaway.append(pizza)

    @pizza_log("üî•üî™ –ò—Å–ø–µ–∫–ª–∏ –ø–∏—Ü—Ü—É –∑–∞ {:.2f}—Å")
    def bake(self) -> None:
        """–ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—á—å –ø–∏—Ü—Ü—É –Ω–∞ –∫—É—Ö–Ω–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏"""

        with tqdm(total=100, desc="Baking") as pbar:
            num_to_bake = len(self.to_bake)
            while self.to_bake:
                max_time = MAX_BAKING_TIME[self.to_bake[0].size]
                sleep(random.randint(1, max_time))
                pbar.update(100 / (num_to_bake * 3))
                self.to_bake[0].bake()
                self.to_bake.pop(0)
                sleep(random.randint(1, max_time))
                pbar.update(100 / (num_to_bake * 3))
                sleep(random.randint(1, max_time))
                pbar.update(100 / (num_to_bake * 3))

    @pizza_log("üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {:.2f}—Å!")
    def get_order_delivered(self) -> None:
        """–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—ã, –∫–æ—Ç–æ–≤—ã–µ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ"""

        if self.to_delivery:
            with tqdm(total=100, desc="Delivery") as pbar:
                num_to_delivery = len(self.to_delivery)
                while self.to_delivery:
                    sleep(random.randint(1, 4))
                    pbar.update(100 / (num_to_delivery * 3))
                    self.to_delivery.pop(0)
                    sleep(random.randint(1, 4))
                    pbar.update(100 / (num_to_delivery * 3))
                    sleep(random.randint(1, 4))
                    pbar.update(100 / (num_to_delivery * 3))

    @pizza_log("üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {:.2f}—Å!")
    def get_order_takeaway(self) -> None:
        """–ú–µ—Ç–æ–¥ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É –≥–æ—Ç–æ–≤—ã–µ –ø–∏—Ü—Ü—ã"""
        if self.to_takeaway:
            with tqdm(total=100, desc="Takeaway") as pbar:
                num_to_takeaway = len(self.to_takeaway)
                while self.to_takeaway:
                    sleep(random.randint(1, 4))
                    pbar.update(100 / (num_to_takeaway * 3))
                    self.to_takeaway.pop(0)
                    sleep(random.randint(1, 4))
                    pbar.update(100 / (num_to_takeaway * 3))
                    sleep(random.randint(1, 4))
                    pbar.update(100 / (num_to_takeaway * 3))

    def get_buisiness(
        self, order: str, delivery: bool = False, size: str = "L"
    ) -> None:
        """–ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –ø–∏—Ü—Ü–µ—Ä–∏–∏:
        -–ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤
        -–≥–æ—Ç–æ–≤–∫–∞ –ø–∏—Ü—Ü
        -–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É
        -–¥–æ—Å—Ç–∞–≤–∫–∞

        Parameters:
        order (str):
            –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã –∏–∑ –º–µ–Ω—é
        delivery (bool):
            –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞
        size (str) (default = L):
            –†–∞–∑–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –ø–∏—Ü—Ü—ã
                (–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã L –∏–ª–∏ XL)
        """

        if not isinstance(order, str):
            raise TypeError("Pizza name must be string")

        if not isinstance(size, str):
            raise TypeError("Size name must be string")

        self.get_order(order, delivery=delivery, size=size.upper())
        self.bake()
        if self.to_delivery:
            self.get_order_delivered()
        else:
            self.get_order_takeaway()


if __name__ == "__main__":
    pizzaria = Pizzaria()
    pizzaria.get_buisiness("Hawaiian", delivery=True, size="XL")
